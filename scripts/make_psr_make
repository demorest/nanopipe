#! /usr/bin/env python

# Create pulsar timing makefile
# This is somewhat specific to guppi/puppi files which have names like:
#  guppi_56249_J1713+0747_0004_0001.fits
#  guppi_56249_J1713+0747_0006_cal_0001.fits

import sys
from functools import reduce
basedir = '..'
if len(sys.argv) > 1:
    basedir = sys.argv[1]

#######################################################################
# Configuration section
#######################################################################

# Filename extensions of the raw input files
raw_ext = "fits"

# Processing version suffix
ver_id = "NG"

# Log any calibration failures in this file
cal_fail = 'cal_failures.list'

# Files containing list of files and/or scans to ignore
ignore_files = [basedir+'/files.ignore', cal_fail]

# Standard zap commands (paz arguments) to apply per receiver
# 'default' is applied to any reciever not listed
zap = {
        'Rcvr1_2':'-F "1100 1150" -F "1250 1262" -F "1288 1300" -F "1373 1381" -F "1442 1447" -F "1525 1558" -F "1575 1577" -F "1615 1630" -F "1370 1385"',
        'Rcvr_800':'-F "794.6 798.6" -F "814.1 820.7"',
        '327':'',
        '430':'-F "380 420" -F "446 480"',
        'L-wide':'-F "980 1150" -F "1618 1630"',
        'S-wide':'-F "1600 1770" -F "1880 2050" -F "2100 2160" -F "2400 2600"',
        'default':''
    }

# Additional zapping (paz args) applied to specific files.  Keys
# should be base scan names (no extension).  This is applied
# to the calibrated files.
extra_zap = {}

# Calibration method (pac options) to apply for each receiver
# Multiple options per reciever can be specified.
# 'default' is applied for receivers not explicitly listed. 
#cal_methods = {'Rcvr1_2':['x','S'],'default':['x']}
cal_methods = {'default':['x']}

# Any additional options to pass to pac
pac_args = '-Ta'

# Extension to add to calibrated data files.  Note, if 
# cal_method is 'P', a 'P' will be appended after this
# extenstion.
calib_ext = 'calib'

# Frequency scrunch commands (pam options) to apply in order
# to reduce the data to the final resolution desired for TOAs.
fscrunch_arg = {'327':'', '430':'', 'Rcvr_800':'-f2', 'Rcvr1_2':'-f8', 
        'L-wide':'-f8', 'S-wide':'-f8', 'default':'--setnchn=64'}

# For fixing REF_MJD precision problem, needs to be run before
# rephasing to a new parfile.  Also updates backend delays.
fix_arg = "-j 'fix refmjd' -J " + basedir + "/update_be_delay.psrsh"

# Initial tscrunching (or other processing) to do when combining
# raw files.
tscrunch_arg = "-j 'T x8'"

# Name of the rfi-zapping script to call
zap_script = basedir + "/zap_minmax"

# Final tscrunch pam arg for TOAs (.ff files)
final_tscrunch = "" # Overrides the pam argument
max_tscrunch = 1800.0 # Maximum tscrunch in seconds
max_pbfrac = 0.025 # Maximum fraction of an orbit to tscrunch

# Specify templates from a different backend
template_be = ""

# Specifiy version id tag for tempaltes
template_id = ""

# Specify which cal method should be used for timing template
template_cal_method = ""

# Per-pulsar template info.  fill with tuples of backend, tag, and
# cal method.  Otherwise will default to general settings above.
template_settings = {}

# Template settings for wideband TOAs
wb_template_be = ""
wb_template_id = ""
wb_template_cal_method = ""
wb_template_settings = {}

# Turn off rules to make templates
build_templates = False

# Turn off to disable RMS normalization
do_norm = True

# Reset coordinates from par file
fix_coords = False

# Format as understood by "pat -f" for TOAs.
toa_format = "tempo2 IPTA"

# Any addtional args for pat
toa_args = "-A FDM -e mcmc=0 -C chan -C subint -C snr -C wt"

# Extra flag text to append to each TOA line
toa_flags = ""

# Extra flag text per receiver
rcvr_toa_flags = {}

# Compute wide-band TOAs
do_wideband = False

# Allow any of these to be redefined in a local config file
try:
    exec(compile(open(basedir + '/make_psr_make.config.py', "rb").read(), basedir + '/make_psr_make.config.py', 'exec'))
except IOError:
    pass

#######################################################################
# End of config section
#######################################################################

import os, sys, glob
import psrchive
from nanopipe import get_proper_name

# List of original input files, they are assumed to all have the 
# given extension.
inputs = glob.glob("*." + raw_ext)

# Ignore file can contain either full *.fits filenames to ignore,
# or just the base part of the scan.
ignores = []
for fname in ignore_files:
    try: 
        ignores.extend([x.strip() for x in open(fname).readlines()])
    except: 
        pass

# Strip out any ignored files
inputs = [x for x in inputs if x not in ignores]

def get(d,k,default='default'):
    if k in list(d.keys()): return d[k]
    else: return d[default]

# Return the 'base' part of file name
def basename(full):
    noext = full.replace('.'+raw_ext,'')
    if 'uppi' in noext:
        # GUPPI/PUPPI case
        parts = noext.split('_')
        if parts[4] == 'cal':
            return noext
        else:
            return str.join('_',parts[:4])
    elif 'vegas' in noext:
        # VEGAS
        parts = noext.split('_')
        if parts[5] == 'cal':
            return noext
        else:
            return str.join('_',parts[:5])
    elif '.AC' in noext or '.BD' in noext:
        # VLA
        parts = noext.split('.')
        iparts = parts[-1].split('_')
        if iparts[1]=='cal':
            return noext
        parts[-1] = str.join('_',iparts[:-1])
        return str.join('.',parts)
    else:
        return noext

# Return the full filename for 1st file in scan set
def fullname(base):
    if ('uppi' in base or 'vegas' in base) and (not 'cal' in base):
        return (sorted(glob.glob(base + "_????." + raw_ext)))[0]
    elif ('.AC' in base or '.BD' in base) and (not '_cal_' in base):
        return (sorted(glob.glob(base + "_????." + raw_ext)))[0]
    else:
        return base + '.' + raw_ext

# Return whether a given input file is part of a given scan
def scan_match(base,full):
    if ('uppi' in base or 'vegas' in base) and not 'cal' in base:
        if 'cal' in full:
            return False
        else:
            return base.replace('.'+ver_id,'') in full
    if 'Cal' in full and not 'Cal' in base:
        return False
    else:
        return base.replace('.'+ver_id,'') in full

# Fix broken/inconsistent puppi labelling
def fix_rcvr_name(archive):
    if archive.get_backend_name()=='PUPPI':
        nc = archive.get_nchan()
        freq = archive[0].get_centre_frequency(nc//2)
        if (freq<400.0): return '327'
        if (freq<500.0): return '430'
        if (freq<1900.0): return 'L-wide'
        if (freq<3000.0): return 'S-wide'
    return archive.get_receiver_name()

# List of unique base filenames (eg, scans)
scans = list(set(map(basename,inputs)))

# Strip out ignored scans
scans = [x for x in scans if x not in ignores]

# Separate into cal and psr, get any necessary info
psrchive.Profile.no_amps.fset(True)
calscans = []
psrscans = []
rcvrs = {}
for sc in scans:
    arch = psrchive.Archive_load(fullname(sc))
    if arch.get_type() == "PolnCal":
        calscans.append(sc)
    elif arch.get_type() == "Pulsar":
        psrscans.append(sc)
        rcvrs[sc] = fix_rcvr_name(arch)

# Assume for now that all files are of a single source
# Get it from the first file in the list
# Same for backend
arch = psrchive.Archive_load(fullname(psrscans[0]))
srcname = get_proper_name.proper_name(arch.get_source().strip())
backend = arch.get_backend_name()

# Set the maximum tscrunch time based on binary period
try:
    pb_sec = float(arch.get_ephemeris().get_value('PB').replace('D','e'))*86400.0
except ValueError:
    pb_sec = 0.0
except RuntimeError:
    try:
        pb_sec = pb_table[srcname]*86400.0
    except:
        pb_sec = 0.0
if pb_sec > 0:
    max_tscrunch = min(pb_sec*max_pbfrac, max_tscrunch)
    # XXX temp hack for 0636
    #max_tscrunch = max(max_tscrunch, 128.0)

# Append version id to each scan name
calscans = [x+'.'+ver_id for x in calscans]
psrscans = [x+'.'+ver_id for x in psrscans]

# Lists of psr scans by recvr
rcvrscans = {}
rcvrnames = list(set(rcvrs.values()))
for r in rcvrnames:
    rcvrscans[r] = [x for x in psrscans if rcvrs[x.replace('.'+ver_id,'')]==r]

# Print an informative Makefile header
print("""# NOTE:
# This makefile was automatically generated by the make_psr_make
# script.  It will try to update itself if it finds new data files
# available, so any changes made here will likely be overwritten.
# 
# Working dir '%s'
# Source name '%s'
#
# To generate partially scrunched, uncalibrated files:
#    make -f Make.psr rf
# To generate calibrated files:
#    make -f Make.psr calibration
# To generate RFI-zapped files:
#    make -f Make.psr zap
# To generate scrunched files:
#    make -f Make.psr scrunch
# To generate templates for timing:
#    make -f Make.psr templates
# To generate toas:
#    make -f Make.psr toas
#
# (-j, -k, and other standard make options can be used as desired)
""" % (os.getcwd(), srcname))

# Makefile targets - each has a list of prereqs
targets = {}
targets['calibration'] = []
targets['zap'] = []
targets['scrunch'] = []
targets['templates'] = []
targets['toas'] = []
targets['all'] = ['calibration', 'templates', 'toas']
print(".DEFAULT_GOAL := calibration")

# Update the makefile
mfile = 'Make.psr'
makemake = __file__
print(mfile + ": *." + raw_ext + " " + cal_fail)
print("\t" + makemake + " > $@")

print(cal_fail + ": ")
print("\t" + "touch " + cal_fail)

# Make the tscrunched cal files with cf extension
#print "%."+ver_id+".cf: %." + raw_ext + ("\n\tpam -e %s.cf -T --name `get_proper_name $<` $<" % ver_id)
print("%."+ver_id+".cf: %." + raw_ext) 
print("\tpsradd -T " \
        + fix_arg \
        + " " + tscrunch_arg \
        + " -j \"e rcvr:name=`fix_receiver_name $<`\"" \
        + " -j \"e name=`get_proper_name $<`\"" \
        + " -o $@ $^") 
print("\ttest -e $@ || echo $* >> " + cal_fail)
cfs = [x+'.cf' for x in calscans]
print(".PHONY: all cf calibration zap scrunch templates toas")
targets['cf'] = cfs
targets['calibration'].append('cf')
dbfile = "database.txt"

# Update the psrchive cal database
if len(cfs)>0:
    print(dbfile + ": " + str.join(' ',cfs) + "\n\tpac -w")
else:
    print(dbfile + ": " + str.join(' ',cfs) + "\n\ttouch $@")
targets['calibration'].append(dbfile)

# Make the combined .rf files
parfile = srcname + ".basic.par"
if os.path.exists(parfile): 
    # If the .basic.par file exists, use it to realign all profiles
    # and apply the DM found in there.
    epharg = "-j 'install par " + parfile + "'"
    try:
        eph = psrchive.TextParameters()
        psrchive.Parameters.load(eph,parfile)
        dmarg = "-j \"e dm=%.6f\"" % float(eph.get_value('DM'))
    except:
        dmarg = ""
else: 
    epharg = ""
    dmarg = ""
if fix_coords:
    coord_arg = "-j \"e coord=`get_parfile_coords $<`\""
else:
    coord_arg = ""
print("%."+ver_id+".rf:\n\tpsradd -n " + fix_arg + " " + epharg \
        + " " + dmarg \
        + " " + tscrunch_arg \
        + " " + coord_arg \
        + " -j \"e rcvr:name=`fix_receiver_name $<`\"" \
        + " -j \"e name=`get_proper_name $<`\"" \
        + " -o $@ $^") 
targets['rf'] = ([x+'.rf' for x in psrscans])
targets['calibration'].append('rf')
for sc in psrscans:
    targets[sc+'.rf'] = sorted([x for x in inputs if scan_match(sc,x)])

# Calibrated files
# Note these depend on fluxcals also but we'll ignore that for now.
# Also note that we don't track which specific cal files each scan
# depends on.  Instead, the 'order-only' cf prereq makes sure all the
# cal scans are processed before any psr scans are calibrated.
print("\nXPAZ = ") # default to no extra zapping
calib_scans = {}
for r in rcvrnames:
    cm = get(cal_methods,r)
    z = get(zap,r)
    calib_scans[r] = []
    for c in cm:
        if 'P' in c: do_fluxcal=False
        else: do_fluxcal=True
        if 'N' in c: do_calib=False
        else: do_calib=True
        ext = c + '.' + calib_ext
        extpac = ext
        if not do_fluxcal: extpac = ext + 'P'
        calib_scans[r].extend([x+'.'+c for x in rcvrscans[r]])
        calib_files = [x+'.'+extpac for x in rcvrscans[r]]
        print("\n# Calibration for receiver '%s':" % (r))
        # Print out file-specific zap commands here
        for i, x in enumerate(rcvrscans[r]):
            xb = x.replace('.'+ver_id,'')
            if xb in extra_zap.keys():
                print(calib_files[i] + ": XPAZ = " + extra_zap[xb])
        print(str.join(' ',calib_files)+": %."+extpac+": %.rf | cf "+ dbfile)
        if do_calib:
            print("\ttest -e $< && (pac " + pac_args + " -" + c + " -e " + ext + " -d " + dbfile + " $< 2>&1 | tee $@.pac.log) || echo $* | sed 's/."+ver_id+"$$//' >> " + cal_fail)
            print("\ttest -e $@ && (paz -m -E2.0 " + z + " $(XPAZ) $@; rm $@.pac.log) || echo $* | sed 's/."+ver_id+"$$//' >> " + cal_fail)
            if do_fluxcal:
                print("\ttest -e $@ || rm -f $@P") # clean up .calibP files
        else:
            # For method 'N' (no calibration) just link to the rf file
            print("\ttest -e $< && ln -f -s $< $@")
        targets['calibration'].extend(calib_files)

all_calib_scans = []
for r in rcvrnames: all_calib_scans.extend(calib_scans[r])

# Extra zapping
zap_cmd = "psrsh -e zap " + zap_script + " $<"
print("\n%.zap: %." + calib_ext + "\n\t " + zap_cmd)
print("\n%.zap: %." + calib_ext + 'P' + "\n\t " + zap_cmd)
targets['zap'].extend([x+'.zap' for x in all_calib_scans])

# Normalize by off-pulse RMS
if do_norm:
    print("\n%.norm: %.zap\n\tnormalize_rms -w $<")
    targets['scrunch'].extend([x+'.norm' for x in all_calib_scans])

# Make final partly scrunched version for TOAs, different scrunch
# per rcvr
if final_tscrunch == "":
    final_tscrunch = "--setnsub `psredit -Q -c length $< | awk '{print int($$2/%.1f) + 1}'`" % max_tscrunch
for r in rcvrnames:
    files = [x+'.ff' for x in calib_scans[r]]
    f = get(fscrunch_arg,r)
    in_ext = 'norm' if do_norm else 'zap'
    print(str.join(' ',files)+": %.ff: %."+in_ext+"\n\tpam -e ff "+f+" "+final_tscrunch+ " $<")
    targets['scrunch'].extend(files)

# Create lists of final profiles:
list_ext = 'fflist'
print("%." + list_ext + ":\n\trm -f $@; for f in $^; do echo $$f >> $@; done")

# Generate template files and TOAs.
# This will currently regenerate all TOAs anytime anything changes..
if build_templates:
    print("%.sum:\n\tautotoa -g0.1 -i3 -S $@ $^\n\tpam -r0.5 -m $@")
    print("%.sm: %\n\tpsrsmooth -W -t UD8 $<")
flagtxt = "-proc " + ver_id + " -pta NANOGrav " + toa_flags
pat_cmd = "pat " + toa_args + " -f \"" + toa_format + "\" -X \"" + flagtxt + " $(XFLAG)\" -s $< -M $(basename $(basename $@))." + list_ext + " >> $@"

def pptoa_flags(txt):
    """Convert flag text to pptoas command line args"""
    stuff = txt.split()
    # We need an even number of items
    if len(stuff) % 2:
        raise RuntimeError("Invalid flag text: '" + txt + "'")
    # Strip leading dash from flag names (not values)
    for i in range(0,len(stuff),2):
        stuff[i] = stuff[i].lstrip('-')
    return str.join(',',stuff)

# example pptoas:
# pptoas.py -m [PP model (currently .spl)] -d [archive file (.ff)] -o [.tim file] --print_flux --flags=pta,NANOGrav,ver,0.1,proc,15y --quiet
#toa_flags_wb = ','.join([x.lstrip('-') for x in toa_flags.split(' ')])
#pptoas_cmd = "pptoas.py --print_flux --quiet --flags=pta,NANOGrav,proc,%s,%s -m $< -d $(basename $(basename $@)).%s -o $@" % (ver_id,toa_flags_wb,list_ext)
toa_flags_wb = pptoa_flags(flagtxt)
pptoas_cmd = "pptoas.py --print_flux --quiet --flags=%s$(XFLAG) -m $< -d $(basename $(basename $@)).%s -o $@" % (toa_flags_wb,list_ext)

if srcname in list(template_settings.keys()):
    template_be = template_settings[srcname][0]
    template_id = template_settings[srcname][1]
    template_cal_method = template_settings[srcname][2]

if srcname in list(wb_template_settings.keys()):
    wb_template_be = wb_template_settings[srcname][0]
    wb_template_id = wb_template_settings[srcname][1]
    wb_template_cal_method = wb_template_settings[srcname][2]

## old ver:
#if template_be=="":
#    print "%.tim: %.sum.sm\n\techo 'MODE 1' > $@\n\t" + pat_cmd
#else:
if template_be=="": template_be=backend
if template_id=="": template_id=ver_id
if wb_template_be=="": wb_template_be=backend
if wb_template_id=="": wb_template_id=ver_id
if True:
    cms = list(set(reduce(lambda x,y: x+y, list(cal_methods.values()))))
    for c in cms:
        tim_id = "%s.%s.%s" % (backend, ver_id, c)

        if template_cal_method=="": c_tmp=c
        else: c_tmp = template_cal_method
        tmp_id = "%s.%s.%s" % (template_be, template_id, c_tmp)
        print(("%%.%s.nb.tim: %%.%s.sum.sm\n\techo 'MODE 1' > $@\n\t" % (tim_id,tmp_id)) + pat_cmd)

        if wb_template_cal_method=="": c_tmp=c
        else: c_tmp = wb_template_cal_method
        tmp_id = "%s.%s.%s" % (wb_template_be, wb_template_id, c_tmp)
        print(("%%.%s.wb.tim: %%.%s.sum.ff.spl\n\techo -e 'FORMAT 1\\nMODE 1' > $@\n\t" % (tim_id,tmp_id)) + pptoas_cmd)

        print("") 

# default rcvr-specific flags to blank
print("\nXFLAG = ")

for r in rcvrnames:
    cm = get(cal_methods,r)
    for c in cm:
        id_str = '%s.%s.%s.%s.%s' % (srcname,r,backend,ver_id,c)
        tmpl = id_str + '.sum'
        tmpl_sm = tmpl + '.sm'
        targets['templates'].append(tmpl)
        targets['templates'].append(tmpl_sm)
        # Note: I think we only want to regenerate templates when it is
        # explicitly asked for.  This depend list works with the rule
        # given above.
        #targets[tmpl] = map(lambda x: x+'.'+c+'.ff', rcvrscans[r])
        # Instead, use a explicit rule for each template
        profiles = [x+'.'+c+'.ff' for x in rcvrscans[r]]

        if build_templates:
            print(tmpl + ":")
            print("\tautotoa -g0.1 -i3 -S $@ " + str.join(' ',profiles) \
                    + "\n\tpam -r0.5 -m $@")

        # Build a list of all relevant profile files
        fflist = id_str + '.' + list_ext
        targets[fflist] = profiles

        toa = id_str + '.nb.tim'
        targets['toas'].append(toa)
        targets[toa] = [fflist,]

        # Add receiver-specific TOA flags
        if r in rcvr_toa_flags:
            print(toa + ": XFLAG = " + rcvr_toa_flags[r])

        if do_wideband:
            wbtoa = id_str + '.wb.tim'
            targets['toas'].append(wbtoa)
            targets[wbtoa] = [fflist,]

            # Receiver-specific flags
            if r in rcvr_toa_flags:
                txt = pptoa_flags(rcvr_toa_flags[r])
                print(wbtoa + ": XFLAG = ," + txt)


# Print all the dependencies
print("\n# Dependencies:")
for t in list(targets.keys()):
    print(t + ": " + str.join(' ',targets[t]))
